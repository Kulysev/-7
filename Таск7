1.
#include <iostream>
#include <vector>
#include <unordered_map>
#include <cstdlib> 
#include <ctime>   

std::vector<int> removeDuplicates(const std::vector<int>& nums) {
    std::unordered_map<int, int> countMap;
 
    for (int num : nums) {
        countMap[num]++;
    }

    std::vector<int> uniqueElements;
    
    for (const auto& pair : countMap) {
        uniqueElements.push_back(pair.first);
    }

    return uniqueElements;
}

std::vector<int> generateRandomNumbers(int size, int min, int max) {
    std::vector<int> randomNumbers;
    for (int i = 0; i < size; ++i) {
        randomNumbers.push_back(rand() % (max - min + 1) + min);
    }
    return randomNumbers;
}

int main() {
    srand(static_cast<unsigned int>(time(0)));

    std::vector<int> nums = generateRandomNumbers(20, 1, 100);
    
    std::cout << "Сгенерированные числа: ";
    for (int num : nums) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    std::vector<int> uniqueNums = removeDuplicates(nums);
    
    std::cout << "Уникальные элементы: ";
    for (int num : uniqueNums) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    return 0;
}

2.
def merge_sorted_arrays(arr1, arr2):
    merged = []
    i, j = 0, 0

    while i < len(arr1) and j < len(arr2):
        if arr1[i] < arr2[j]:
            merged.append(arr1[i])
            i += 1
        else:
            merged.append(arr2[j])
            j += 1

    while i < len(arr1):
        merged.append(arr1[i])
        i += 1

    while j < len(arr2):
        merged.append(arr2[j])
        j += 1

    return merged

array1 = [
    [1, 3, 5],
    [7, 8, 9],
    [10, 12, 14]
]

array2 = [
    [2, 4, 6],
    [8, 10, 11],
    [13, 15, 17]
]

flat_array1 = [num for row in array1 for num in row]
flat_array2 = [num for row in array2 for num in row]

result = merge_sorted_arrays(flat_array1, flat_array2)

result_2d = [result[i:i + 6] for i in range(0, len(result), 6)]

print("Объединенный отсортированный массив:")
for row in result_2d:
    print(row)

4.
#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>

int main() {
    std::srand(std::time(0));

    const int rows = 4;
    const int cols = 4;
    int array[rows][cols];

    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            array[i][j] = std::rand() % 9 + 1; 
        }
    }

    std::cout << "Исходный массив:\n";
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            std::cout << array[i][j] << " ";
        }
        std::cout << std::endl;
    }

    std::vector<int> even_numbers;
    std::vector<int> odd_numbers;

    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            if (array[i][j] % 2 == 0) {
                even_numbers.push_back(array[i][j]);
            } else {
                odd_numbers.push_back(array[i][j]);
            }
        }
    }

    std::vector<int> result = even_numbers;
    result.insert(result.end(), odd_numbers.begin(), odd_numbers.end());

    int result_2d[rows][cols];
    int index = 0;
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            result_2d[i][j] = result[index++];
        }
    }

    std::cout << "\nМассив с четными числами перед нечетными:\n";
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            std::cout << result_2d[i][j] << " ";
        }
        std::cout << std::endl;
    }

    return 0;
}
